# Step 1
Code affected: DatabaseHelper.java
- Added class DatabaseHelper which helps to manipulate database.

# Step 2
Code affected: User.java
- Added class User, instances of which store each player's account information.

# Step 3
Code affected: SignInActivity.java
- Added methods to check username and password when signing in.

# Step 4
Code affected: SignInActivity.java
- Fixed bug where input username and password are always empty.

# Step 5
Code affected: activity_signup.xml
- Added new EditText to let user re-enter their password and new Button to login instead.

# Step 6
Code affected: SignUpActivity.java
- Added method to check the validity of username, password and re-entered password the user entered
when signing up and added the new user to the database.

# Step 7
Code affected: Command.java, SecondGameActivity.java, SecondGameOver.java
- Move the classes of the second game into a separate package Autumn.

# Step 8
Moved third game files to a separate package

# Step 9
Moved first game files to a separate package

# Step 10
Code affected: UserRecordActivity, activity_user_record
Added activity and its corresponding layout to view user's record

# Step 11
Code affected: StartGameActivity, UserRecordActivity, LocalRecordActivity, activity_localrecords
- Added activity and its corresponding layout to view all local records on the phone
- Implemented onClick methods in StartGameActivity, UserRecordActivity, LocalRecordActivity

# Step 12
Code affected: FirstGameManager.java, update, MonsterGeneratePermit
- Added a new method called MonsterGeneratePermit, which applies a inner clock to avoid a few
  monsters occurring in a row.
- Added a new static int "innerclock" and a final static int "clockUpper" to make
  MonsterGeneratePermit work.
- Changed the corresponding monster-generate condition in update to make dependency injection.

# Step 13
Code affected: ThirdGameActivity, ThirdGameManager, PictureMover, StepManager
- Created class PictureMover to manage picture movements
- Created class StepManager to keep track of steps and decide current behaviors

# Step 14
Code affected: PictureMover, ThirdGameManager
- Made animation smoother

# Step 15
Code affected: FirstGameManager
- Renamed the input parameters in the constructor of FirstGameManager

# Step 16
Code affected: FirstGameManager, FirstGameItem, Obstacle, Player, FirstGameView
- Encapsulated access modifiers by making the variables private and adding setter and getter methods.

# Step 17
Code affected: FirstGameItem, Obstacle, Player, FirstGameView
- Encapsulated access modifiers and methods.

# Step 18
Codo affected: ScoreManager, ThirdGameActivity
- Created class ScoreManager to calculate and display score

# Step 19
Code affected: PictureMover, StepManager, ThirdGameManager
- Fixed bug where sometimes transitions between steps does not work as expected

# Step 20
Code affected: FirstGameActivity, Obstacle, Player, FirstGameView, FirstGameManager, FirstGameOver,
Customization
- Renamed variables by making them more descriptive and meaningful.

# Step 21
Code affected: Player, FirstGameView
- Extracted magic numbers into constants to decrease the chance of code regression.

# Step 22
Code affected: ThirdGameActivity, PictureMover, StepManager
- Fixed bug where some movements lead to program termination

# Step 23
Code affected: MainActivity, MainMenuActivity
- added an entry page

# Step 24
Code affected: activity_main_menu.xml
- changed background and font for menu page

# Step 25
Code affected: activity_signup.xml
- changed background and font for sign-up page

# Step 26
Code affected: activity_signin.xml
- changed background and font for sign-in page

# Step 27
Code affected: FirstGameView
- Improve FirstGameView constructor by extracting game element creation into separate methods.

# Step 28
Code affected: FirstGameView, FirstGameManager, Player, Obstacle, FirstGameItem
- Add JavaDocs for the methods and variables.

# Step 29
Code affected: FirstGameView, FirstGameManager, Obstacle
- Renamed some variables, made some magic numbers into constants and turned some instance variables
into local variables.

# Step 30
Code affected: Customization, FirstGameActivity
- Changed the code in onClick, eliminating duplicate code and make it open to extend.
- Change the corresponding name onCreate in FirstGameActivity.

# Step 31
Code affected: activity_secondgame.xml
- changed the appearance for game Autumn.

# Step 32
Code affected: FirstGameView, Player
- Make the code more extendable by eliminating if statements in FirstGameView constructor and
drawRunningPlayer method and replacing it with a factory to generate figures for the corresponding
code.
- Change the access modifier in Player from static to instance.

# Step 33
Code affected: FirstGameView
- Delete redundant local variable.

# Step 34
Code affected: AutumnController, AutumnManager
- Created classes AutumnController and AutumnManager

# Step 35
Code affected: AutumnActivity
- Created class AutumnActivity

# Step 36
- Added second language: Chinese to the game.

# Step 37
Code affected: FirstGameView
- Encapsulated an instance variable.
- Added Javadoc

# Step 38
Code affected: FirstGameActivity, AutumnActivity, ThirdGameActivity
- Override the onRestart() method in each activity, making the game return to its initial stage
  when the user accidentally exits and come back later.

# Step 39
Code affected: Customization, FirstGameActivity, FirstGameView
- When we choose the character in customization, we pass a string (instead of an int) to
  FirstGameActivity and then to FirstGameView in order to set the view of character.
- Apply ENUM in FirstGameView to choose the character to be shown on the screen, making it easier
  to extend the game.

# Step 40
Code affected: FirstGameManager, Obstacle
- Moved the responsibility of scoring points from Obstacle to FirstGameManager.
- Finished one of the To-Do : garbage collection of useless obstacles.

# Step 41
Code affected: FirstGameManager, Player
- Moved the responsibility of checking collision from Player to FirstGameManager.

# Step 42
Code affected: Player, Obstacle, SummerThread, SummerGameOver, SummerManager, SummerItem, SummerView,
SummerActivity, Customization
- Renamed files in the first game Summer using the game's name.

# Step 43
Code affected: SummerManager, SummerItem, SummerActivity, SummerData
- Added SummerData to store the game's statistics
- Modified the constructor of SummerItem

# Step 44
Code affected: Customization
- Added a new case in the switch-case block in method onClick, making sure that character will be
  initialized before passing on. (By default "KNIGHT")

# Step 45
Code affected: activity_winter, activity_summer
- changed background for summer
- changed background and updated pictures for winter

# Step 46
Code affected: Customization, Obstacle, Player, SummerActivity, SummerData, SummerController,
SummerGameView, SummerItem, SummerManager, SummerView
- Applied MVC design pattern to the game Summer
- Added SummerController, SummerData and SummerView
- Renamed SummerGameView(formerly SummerView)
- Edited Javadoc

# Step 47
Code affected: MusicService.java, MainActivity.java
- added background music for the game
- added rudimentary settings page

# Step 48
Code affected: Obstacle, Player, SummerGameView, SummerGameItem, SummerGameManager
- Delete the past approximation of figure height and figure width in SummerItem, Obstacle, Player.
- Add scaling constant OBSTACLE_ADJUSTMENT in SummerManager, making the judgement of collision
  smoother.
- Add scaling constants PLAYER_ADJUSTMENT and OBSTACLE_ADJUSTMENT in SummerGameView, making the
  width and height of players and obstacles fit to the visible size in the screen.

# Step 49
Code affected: SummerController, SummerView, SummerManager, SummerGameView
- Make SummerManager more extendable by not directly using context from SummerGameView

# Step 50
Code affected: SummerActivity
- Fix the bug that when the user exits and returns, he can not use the same mode he had chosen
before exit.

# Step 51
Code affected: Jade, SummerController, SummerManager, SummerView, SummerGameView
- Jade is a new class that refers to a rare treasure that we can collect during the adventure. It
  is a subclass class of SummerItem.
- Added two methods in SummerManager's interface UpdateListener. Added corresponding methods to
  create and manage all the jades, including getJades(), score_by_jades() and modification in
  update(), collectGarbage(). Use jades and earned_jades to record the all the jades and counted
  jades respectively. Apply some constants to fit the image to the screen.
- Make SummerController implement getJadeWidth and getJadeHeight, also add a new method getJades()
- Update the interface SummerView, adding two methods: getJadeWidth, getJadeHeight
- In SummerGameView, create the corresponding Bitmap jadeBmp of the jade. Also override getJadeWidth
  and getJadeHeight. In method draw, make it draw all the jades. In createGameElement, make it
  create a new jade.

# Step 52
Code affected: SummerGameView, StarGameActivity, CustomizationActivity
- Renamed Customization class
- Replaced CustomizationActivity
- Edited Javadoc

# Step 53
Code affected: SettingActivity, MainMenuActivity
- implemented settings page in which users can choose to pause/resume background music and to
  change language
- migrated language setting button that was once in menu page to setting page.

# Step 54
Code affected: SummerGameView, SummerController, SummerManager, SummerData, SummerView
- Fix the problem of not correctly using MVC architecture :
1. Delete SummerView
2. Store data about images in SummerManager instead of SummerGameView
3. Modify onTouchEvents method in SummerGameView to let presenter decide which use case to useq
4. Allow SummerGameView to directly get data from the model(SummerManager).

# Step 55
Code affected: SummerManager
- Fix the wrong JADE_ADJUSTMENT of jadeBmp, making it correctly scaled to the screen.
- Change the initial position of jades in update.
- Make the collision of player and obstacles less sensitive.

# Step 56
Code affected: SummerManager
- Change the constant PLAYER_SCALE_ADJUSTMENT, making it correctly fit the screen.
- In the createPlayer, change the initial position of player and the way we setUpperBound of player.

# Step 57
Code affected: SummerManager, GameOverListener, SummerActivity, SummerController, SummerGameView
- Renamed the SummerView into GameOverListener
- Edited Javadoc

# Step 58
Code affected: BackGroundStoryActivity, NewGameActivity
- implemented rudimentary background story page
- fixed the bug that username and password only accept digits.
- Renamed some variables according to Java naming convention.
- Renamed StartGameActivity to NewGameActivity.

# Step 59
Code affected: activity_new_game
- added formal background and changed button style and tint.

# Step 60
Code affected: almost all package files
- renamed packages to all lowercase names according to java naming conventions.

# Step 61
Code affected: SummerManager, SummerGameView
- In SummerGameView, change all the bitmaps that we are using to display on the screen to new .png
  files, solving the problems of scaling them to fit the screen.
- In SummerGameView, change the lower bound and upper bound that the player character can show
  on the screen.
- Resetting up all the scaling constants to 1.0 to stop the scaling. Delete constant LEFT_BOUNDARY.
- Add a new attribute landHeight, keeping the height of the land in this game. Initialize it to be 0.
  It is set in the method addDeviceInfo.
- Change the y-position of obstacles in update() to fit the new landHeight. Change the position of
  and probability of generating jade(pendants).
- Replace the original isCollied method with a new one that is more general, adapting to the
  collision check between all SummerItem objects and player.
- Use while loops to implement the scoring _by_jades. Delete the jades earned by player from jades
  and add them to earned_jades.
- Change the collect_garbage method to better handle the SummerItems that are far away from the
  screen.
- Change the createPlayer with the new attribute landHeight.

# Step 61
Code affected: SummerManager, SummerGameView, Player
- Move the responsibility of preventing the player from moving out of screen from SummerGameView to
SummerManager.

# Step 62
Code affected: SummerGameView, CustomizationActivity, activity_customization.xml
- Added animation for the player when displaying
- Changed pictures for two modes and obstacle

# Step 63
Code affected: summer.SummerGameView, activity_customization.xml
- Randomize the image of each obstacle shown each time by randomizing the pick index.
- Adjust the position of buttons to make it look clean.

# Step 64
Code affected: summer.SummerGameManager
- Add a method itemFactory, applying the Factory Design Pattern and allowing the extension of
  create more items. Also apply the Dependency Injection.
- Add a method moveItems, eliminating duplicate code and make it easier to extend.

# Step 65
Code affected: all files in summer package
- Edited Javadoc for all files in summer package.
- Added a method to get the number of jades earned during this level.

# Step 66
Code affected: all files in summer package
- Fix the bug that jades cannot be collected.
- Renamed a method

# Step 67
Code affected: ScoreBoardActivity
- Created scoreboard for user to view local records as well as their own records.

# Step 68
Code affected: MainGameOver
- Tracked all score and number of jades for each user and display scores and number jades for each
game part.

# Step 68
Code affected: BoostsActivity
- Created methods to allow user to exchange their jades for score.

# Step 69
Code affected: SummerData, SummerManager, SummerController, SummerActivity
- Store jades collected in SummerData.

# Step 70
Code affected: SummerRuleActivity, AutumnRuleActivity, WinterRuleActivity, README
- added game rule page before each level
- wrote rudimentary README

# Step 71
Code affected: SummerManager, Jade
- Encapsulated class Jade
- Encapsulated instance variables

# Step 72
Code affected: AndroidManifest.xml, EndingActivity, NoEndingActivity, MainGameOver,
               activity_ending.xml, activity_no_ending.xml, activity_main_game_over.xml
- Add a new button in MainGameOver, by clicking on which we can jump to different ending activities
  according to the final number of jades that we collected.
- Add buttons in EndingActivity and NoEndingActivity, making them jump to the different pages as
  needed. Now, all of their buttons refer to NewGameActivity because of test need.

# Step 71
Code affected: SummerManager
- Delete useless constant variables

# Step 72
Code affected: GameOverListener, SummerActivity
- Encapsulated two classes

# Step 73
Code affected: all .java files in package winter
- added javadoc for all files in winter.

# Step 74
Code affected: AndroidManifest.xml, EndingActivity, MainGameOver, NewSpringAskActivity,
               NewSpringHelloActivity, activity_new_spring_ask.xml, activity_new_spring_hello.xml,
               activity_main_game_over.xml
- Add two more ending activities and corresponding layouts, the ones that lead to normal ending and
  later go back to the NewGameActivity if the collected jades are not enough.
- Pass the number of jades that the player earned before in the game to make EndingActivity
  decide whether it can trigger the hidden ending.

# Step 75
Code affected: AndroidManifest.xml, HiddenEndingActivity, NewSpringAskActivity, MainGameOver
               NewSpringHelloActivity, activity_new_spring_ask.xml, activity_new_spring_hello.xml,
               activity_hidden_ending.xml
- Add the last hidden ending activity and corresponding layout, which is triggered when more than a
specific amount of jades are collected.
- The hidden ending activity will directly go to NewGameActivity.
- Fix a test bug in MainGameOver

# Step 76
Code affected: activity_new_spring_ask.xml, activity_new_spring_hello.xml, activity_ending.xml,
               activity_no_ending.xml, activity_hidden_ending.xml
- Add the descriptions of each ending section. Adjust the text position to make it look better.
- Now we only offer English Endings.

# Step 77
Code affected: README, BackgroundStoryActivity
- fixed the bug the first game has no rule page
- further wrote README

# Step 78
Code affected: all ending .xml files
- added background image for endings.

# Step 79
Code affected: None
- Added UML